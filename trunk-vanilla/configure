#!/bin/sh
ssldirs="$OPENSSLDIR /usr /usr/local/openssl /usr/lib/openssl /usr/local/ssl /usr/ssl  
         /usr/share /usr/lib /usr/lib/ssl /usr/pkg /opt /opt/ssl /usr/local"

echo "pFTP configure utility by HoE..."

case `uname` in 
          Linux)
            SYS="lnx"
            echo "Platform = Linux"
          ;;
          FreeBSD)
            SYS="bsd"
            echo "Platform = FreeBSD"
          ;;
          CYGWIN*)
            SYS="cyg"
            echo "Platform = CYGWiN"
          ;;
          Darwin)                                                                                         
            SYS="osx"                                                                                     
            echo "Platform = OS X"                                                                        
          ;; 
          *)
            SYS=""
            echo "Platform = UNKNOWN"
          ;;
esac           

DEBUG="0"
USESSL="1"
ac_prev=
for ac_option
do
 if [ ! -z $ac_prev ]; then
 if [ $ac_prev = "--openssldir" ]; then
  HOPENSSLDIR=$ac_option
  ac_prev=""
 fi
 else
 if [ $ac_option = "--openssldir" ]; then
  ac_prev=$ac_option
  continue
 elif [ $ac_option = "--debug" ]; then
  DEBUG="1"
 elif [ $ac_option = "--nossl" ]; then
  USESSL="0"
 elif [ $ac_option = "cyg" ]; then
  SYS="cyg"
  echo "user defined platform = $SYS"
 elif [ $ac_option = "lnx" ]; then
  SYS="lnx"
  echo "user defined platform = $SYS"
 elif [ $ac_option = "bsd" ]; then
  SYS="bsd"
  echo "user defined platform = $SYS"
 elif [ $ac_option = "osx" ]; then                                                                        
  SYS="osx"                                                                                               
  echo "user defined platform = $SYS" 
 else
  echo "try : ./configure <--openssldir [dir]> <--debug> <--nossl> <platform>"
  echo "supported platforms = bsd/lnx/cyg/osx"
  exit 1
 fi
 fi
done

if [ -z $SYS ]; then
  echo "try : ./configure <--openssldir [dir]> <--debug> <--nossl> <platform>"
  echo "supported platform = bsd/lnx/cyg"
  exit 1
fi

makes='gmake make'
for x in $makes; do
 xx=`which $x 2>/dev/null`
 if [ ! -z "$xx" ]; then
  if [ -x "$xx" ]; then
   MAKE=$x
   break
  fi  
 fi 
done

if [ -z $MAKE ]; then
 echo "No make software found... Install GNU make"
 exit 1
fi

echo "Using make = $MAKE"

if [ $USESSL = "1" ]; then
 if [ -z $HOPENSSLDIR ]; then
  for x in $ssldirs; do
#   if [ -f $x/lib/libssl.a ]; then
#   if [ -f $x/lib/libssl.a ] || [ -f $x/lib/libssl.dylib ]; then       
    if [ -f $x/include/openssl/bio.h ]; then
     HOPENSSLDIR=$x
#    fi
   fi
  done
 fi

 if [ -z $HOPENSSLDIR ]; then
  echo "OpenSSL not found, not using TLS method..."
  USESSL="0"
 else 
  USESSL="1"
  echo "OpenSSL dir = $HOPENSSLDIR"
 fi
fi

rm -f src/Makefile
CPPF="-Wall -Wno-unused-result -Wno-write-strings -D_REENTRANT -I../include"
BINARY="pftp"
CPP="g++ -pipe"

if [ $SYS = "cyg" ]; then
 CPPF="$CPPF -DCYGWIN"
 BINARY="pftp.exe"
elif [ $SYS = "osx" ]; then                                                                               
 CPPF="$CPPF -DOSX"
fi

LINKF="-lpanel -lncurses"
LINKFDYN="-lpthread"

rm -f tmp.c
cat >tmp.c <<EOF
#include <ncurses.h>
int  main(void) {
 return 0;
}
EOF

$CPP  -o tmp.out tmp.c -lgpm >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 LINKF="$LINKF -lgpm"
fi

$CPP  -o tmp.out tmp.c -ltinfo >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 LINKF="$LINKF -ltinfo"
fi

$CPP  -o tmp.out tmp.c  -D_FORTIFY_SOURCE=2 -fstack-protector-all -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 CPPF="$CPPF -D_FORTIFY_SOURCE=2 -fstack-protector-all -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE"
fi

$CPP  -o tmp.out tmp.c -flto=auto >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 CPPF="$CPPF -flto=auto"
fi

$CPP  -o tmp.out tmp.c -fPIE >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 CPPF="$CPPF -fPIE"
fi

$CPP  -o tmp.out tmp.c -lgpm >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 LINKF="$LINKF -lgpm"
fi

$CPP  -o tmp.out tmp.c -ldl >/dev/null 2>/dev/null
res=$?

if [ $res -eq 0 ]; then
 LINKFDYN="$LINKFDYN -ldl"
fi
 
rm -f tmp.out tmp.c 2>/dev/null
 
if [ $DEBUG = "1" ]; then
 CPPF="$CPPF -g -DDEBUG"
 LINKF="$LINKF -g"
else
 CPPF="$CPPF -O2"
fi

OBJS=""
if [ $USESSL = "1" ]; then
 OBJS="tlsutil.o"
 if [ $HOPENSSLDIR = "/usr" ]; then
  TMP='-DTLS'
  CPPF="$CPPF $TMP"
  TMP='-lssl -lcrypto -DTLS'
  LINKF="$TMP $LINKF"
 else
  TMP='-I$(SSLDIR)/include -DTLS'
  CPPF="$CPPF $TMP"
  TMP='-L$(SSLDIR)/lib -lssl -lcrypto -DTLS'
  LINKF="$TMP $LINKF"
 fi
fi

echo "SSLDIR          = $HOPENSSLDIR" >>src/Makefile
echo "CPPFLAGS        = $CPPF" >>src/Makefile
echo "LINKFLAGS       = $LINKF" >>src/Makefile
echo "LINKFLAGSDYN    = $LINKFDYN" >>src/Makefile
echo "OBJS            = $OBJS" >>src/Makefile
echo "BINARY          = $BINARY" >>src/Makefile
echo "CPP             = $CPP" >>src/Makefile

cat src/Makefile.in >>src/Makefile
rm -f Makefile
echo "MAKE=$MAKE" >Makefile
cat Makefile.in >>Makefile
rm -f src/*.o src/pftp pftp
echo "Done, you can do \"$MAKE\" now..."
